# Here we will access
base_url: http://localhost
port: 8000
version_api: v1

title: Wholesale Customer Orders API
subtitle: API для доступа браузерных плагинов оптовых покупателей
description: "Оптовые клиенты alibaba24.ru могут установить себе браузерный плагин,
который позволяет откладывать нужные товары в корзину на alibaba24.ru путем внедрения
дополнительных кнопок и элементов на страницы товаров taobao.com.
API является веб-сервисом, который позволяет аутентифицировать клиента и сохранять заказы в базе данных"
footer: (c) Yury Batenko for alibaba24.ru 2015
original:
  # what will be printed into  formatted output, your "real" API URL
  base_url: http://localhost #http://apiwholesale.alibaba24.ru
  port: 8000

# require arbitrary ruby file before starting tests
require: ./spec/fixtures/seed.rb
# in case if you has preloaded ruby file, here you can
# call any ruby methods, say: Namespace::DB.clean() or smth
# also you could run any shell commands: 'my_script.sh -v clear_db'
run:
  before_all: Seed.clear_all; Seed.fill_docs
  after_all: Seed.clear_all
  before_each: Seed.fill_docs
  after_each: Seed.clear_all
  on_error: exit # exit, alert, skip
headers:
  # exclude headers from resulting documentation
  exclude:

# where you define API endpoints
endpoints:
  # /{version_api}/ping
  ping:
    description: Base point for requesting stats
    params: Not expecting any parameters
    methods:
      get:
        -
          description: Return json with current state of service
          headers:
            Accept: application/json
            Origin: http://foo.com
          expect:
            code: 200
            content-type: application/json
            body: OK
      post:
        -
          description: 403 Forbidden when method not allowed
          headers:
            Origin: http://foo.com
          expect:
            code: 403
      put:
        -
          description: 403 Forbidden when method not allowed
          headers:
            Origin: http://foo.com
          expect:
            code: 403
      delete:
        -
          description: 403 Forbidden when method not allowed
          headers:
            Origin: http://foo.com
          expect:
            code: 403
      options:
        -
          description: 200 OK on OPTIONS
          headers:
            Origin: http://foo.com
          expect:
            code: 200
      head:
        -
          description: Return 200 OK on HEAD method
          headers:
            Origin: http://foo.com
          expect:
            code: 200

  order:
    description: Operations with given order
    params: "Expect order_id in path"
    methods:
      get:
        -
          description: When authorized and order exists return order
          path:
            eval: "'/' + Seed.order_for()['_id'].to_s"
          headers:
            Authorization: "token: simple-token"
            Origin: http://foo.com
          expect:
            code: 200
      post:
        -
          description: 403 Forbidden, method not permitted
          headers:
            Origin: http://foo.com
          expect:
            code: 403

      put:
        -
          description: 200 OK when authorized and order valid, update order
          path:
            eval: "'/' + Seed.order_for()['_id'].to_s"
          headers:
            Authorization: "token: simple-token"
            Content-Type: application/json
            Origin: http://foo.com
          body:
            json:
              raw_data:
                something: new
                here: will be converted to json
          expect:
            code: 200
        -
          description: 400 Bad Request when authorized and order not valid
          path:
            eval: "'/' + Seed.order_for()['_id'].to_s"
          headers:
            Authorization: "token: simple-token"
            Content-Type: application/json
            Origin: http://foo.com
          body: Wrong Json
          expect:
            code: 400

      delete:
        -
          description: Successfull delete order  when authorized and order presents
          path:
            eval: "'/' + Seed.order_for()['_id'].to_s"
          headers:
            Authorization: "token: simple-token"
            Origin: http://foo.com
          expect:
            code: 204
        -
          description: 401 Unauthorized when not authorized
          headers:
            Authorization: "token: UNKNOWN"
            Origin: http://foo.com
          expect:
            code: 401
        -
          description: 404 Not found when authorized but no such order
          path: 55713e6a646576758d00001a
          headers:
            Authorization: "token: simple-token"
            Origin: http://foo.com
          expect:
            code: 404

      options:
        -
          description: 200 OK on OPTIONS
          headers:
            Origin: http://foo.com
          expect:
            code: 200

      head:
        -
          description: 403 Forbidden when method not allowed
          headers:
            Origin: http://foo.com
          expect:
            code: 403

  orders:
    description: Operations with list of orders
    params: Doesn`t expect any params
    methods:
      get:
        -
          description: When non-authenticated return 403 Forbidden
          headers:
            Origin: http://foo.com
          expect:
            code: 403
        -
          description: When authenticated, returns authenticated customer`s orders list
          headers:
            Authorization: "token: simple-token"
            Origin: http://foo.com
          expect:
            code: 200
      post:
        -
          description: When non-authenticated return 403 Forbidden
          headers:
            Origin: http://foo.com
          expect:
            code: 403
        -
          description: When authenticated and body valid creates new Order
          headers:
            Authorization: "token: simple-token"
            Origin: http://foo.com
          body:
            json:
              raw_data:
                something: new
                here: will be converted to json
          expect:
            code: 201

      options:
        -
          description: 200 OK on OPTIONS
          headers:
            Origin: http://foo.com
          expect:
            code: 200

      head:
        -
          description: Return OK
          headers:
            Authorization: "token: simple-token"
            Origin: http://foo.com
          expect:
            code: 200

  session:
    description: Create and destroy customer session
    params: "On creation expect json {email: customer@email.com, password: hArD2CRack}"
    methods:
      get:
        -
          description: 403 Forbidden
          headers:
            Origin: http://foo.com
          expect:
            code: 403
      post:
        -
          description: Create session sucesfully when email/password is known. Returns token
          headers:
            content-type: application/json
            Origin: http://foo.com
          body:
            json:
              email: "email@mail.ru"
              password: "something_simple"
          expect:
            code: 201
            headers:
              content-type:application/json
            body: token
        -
          description: Return 404 Not Found when email/password unknown
          headers:
            content-type: application/json
            Origin: http://foo.com
          expect:
            code: 404
          body:
            json:
              email: "unknown@mail.ru"
              password: "BAD GUY"
        -
          description: Return 400 Bad request when not given input json
          headers:
            content-type: application/json
            Origin: http://foo.com
          expect:
            code: 400
          body:
      put:
        -
          description: 403 Forbidden
          headers:
            Origin: http://foo.com
          expect:
            code: 403
      delete:
        -
          description: Destroy customer`s session when customer`s token is known
          headers:
            Authorization: "token: simple-token"
            Origin: http://foo.com
          expect:
            code: 204
        -
          description: 401 Unauthorized if token not given or unknown
          headers:
            Authorization: "token: UNKNOWN"
            Origin: http://foo.com
          expect:
            code: 401

      options:
        -
          description: 200 OK on OPTIONS
          headers:
            Origin: http://foo.com
          expect:
            code: 200

      head:
        -
          description: 403 Forbidden when method not allowed
          headers:
            Origin: http://foo.com
          expect:
            code: 403

  "admin/":
    description: Admin interface access
    params: No params expected
    methods:
      get:
        -
          description: 401 Unauthorized when non-authorized
          headers:
            Origin: http://foo.com
          expect:
            code: 401
        -
          description: 200 OK when authorized
          headers:
            Authorization: Basic YWRtaW46YWRtaW4=
            Origin: http://foo.com
          expect:
            code: 200
